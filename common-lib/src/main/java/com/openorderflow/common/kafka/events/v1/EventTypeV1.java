package com.openorderflow.common.kafka.events.v1;

public enum EventTypeV1 {


    // ORDER EVENTS
    ORDER_CREATION_REQUESTED,
    ORDER_PLACED,
    ORDER_PAYMENT_INITIATED,
    ORDER_PAID,
    ORDER_CONFIRMED,
    ORDER_REJECTED,
    ORDER_CANCELLED,
    ORDER_PREPARATION_STARTED,
    ORDER_DELIVERY_PARTNER_ASSIGNMENT_STARTED,
    ORDER_PREPARED,
    ORDER_DELIVERY_PARTNER_ASSIGNED,
    ORDER_DELIVERY_PARTNER_WAITING,
    ORDER_DELIVERY_PARTNER_PICKED_UP,
    ORDER_DELIVERED,
    ORDER_RATED,
    ORDER_REFUND_INITIATED,
    ORDER_REFUNDED,
    ORDER_FAILED,
    ORDER_TIMED_OUT,

    // INVENTORY EVENTS
    INVENTORY_CREATED,
    INVENTORY_UPDATED,
    INVENTORY_THRESHOLD_LOW,
    ITEM_CATALOG_CREATED,
    ITEM_CATALOG_UPDATED,
    ITEM_CATALOG_DEACTIVATED,
    ITEM_STOCKED,
    ITEM_ORDERED,
    ITEM_RESERVED,
    ITEM_RELEASED,
    ITEM_EXPIRED,
    ITEM_RETURNED,
    ITEM_LOST,
    ITEM_ADJUSTED,

    // DELIVERY EVENTS
    PARTNER_ASSIGNMENT_STARTED,
    PARTNER_ASSIGNED,
    PARTNER_STATUS_UPDATED,
    PARTNER_LOCATION_UPDATED,
    PARTNER_REACHED_PICKUP,
    PARTNER_REACHED_DROPOFF,
    PARTNER_DELIVERY_DELAYED,
    PARTNER_DELIVERY_FAILED,
    PARTNER_UNAVAILABLE,
    PARTNER_COMMUNICATION_FAILED,

    // NOTIFICATION EVENTS
    NOTIFY_USER_ORDER_STATUS,
    NOTIFY_BUSINESS_ORDER_STATUS,
    NOTIFY_PARTNER_ASSIGNMENT,
    NOTIFY_PARTNER_REMINDER,
    NOTIFY_DELIVERY_DELAYED,
    NOTIFY_FEEDBACK_REQUESTED,
    NOTIFY_GENERIC,

    // LOCATION EVENTS
    LOCATION_PARTNER_UPDATED,
    LOCATION_PARTNER_OFFLINE,
    LOCATION_GEO_INACCURACY_DETECTED,

    // RATING EVENTS
    RATING_SUBMITTED,
    RATING_REVISED,
    RATING_REMINDER_SENT,
    RATING_BLOCKED,

    // ANALYTICS EVENTS (optional topic or internal sink)
    EVENT_FORWARDED_ANALYTICS,
    SYSTEM_HEALTH_CHECK,
    EVENT_FAILED_PROCESSING,
    SLA_VIOLATION_DETECTED;

    // Convert to topic type string
    public String getEventName() {
        return this.name().toLowerCase().replace('_', '.');
    }

    public static EventTypeV1 fromString(String value) {
        for (EventTypeV1 status : EventTypeV1.values()) {
            if (status.name().equalsIgnoreCase(value)) {
                return status;
            }
        }
        throw new InvalidEventTypeException("Invalid order status: " + value);
    }
}
